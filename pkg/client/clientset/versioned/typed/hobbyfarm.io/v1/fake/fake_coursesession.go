// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	hobbyfarmiov1 "github.com/hobbyfarm/gargantua/pkg/apis/hobbyfarm.io/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeCourseSessions implements CourseSessionInterface
type FakeCourseSessions struct {
	Fake *FakeHobbyfarmV1
}

var coursesessionsResource = schema.GroupVersionResource{Group: "hobbyfarm.io", Version: "v1", Resource: "coursesessions"}

var coursesessionsKind = schema.GroupVersionKind{Group: "hobbyfarm.io", Version: "v1", Kind: "CourseSession"}

// Get takes name of the courseSession, and returns the corresponding courseSession object, and an error if there is any.
func (c *FakeCourseSessions) Get(name string, options v1.GetOptions) (result *hobbyfarmiov1.CourseSession, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(coursesessionsResource, name), &hobbyfarmiov1.CourseSession{})
	if obj == nil {
		return nil, err
	}
	return obj.(*hobbyfarmiov1.CourseSession), err
}

// List takes label and field selectors, and returns the list of CourseSessions that match those selectors.
func (c *FakeCourseSessions) List(opts v1.ListOptions) (result *hobbyfarmiov1.CourseSessionList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(coursesessionsResource, coursesessionsKind, opts), &hobbyfarmiov1.CourseSessionList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &hobbyfarmiov1.CourseSessionList{ListMeta: obj.(*hobbyfarmiov1.CourseSessionList).ListMeta}
	for _, item := range obj.(*hobbyfarmiov1.CourseSessionList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested courseSessions.
func (c *FakeCourseSessions) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(coursesessionsResource, opts))
}

// Create takes the representation of a courseSession and creates it.  Returns the server's representation of the courseSession, and an error, if there is any.
func (c *FakeCourseSessions) Create(courseSession *hobbyfarmiov1.CourseSession) (result *hobbyfarmiov1.CourseSession, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(coursesessionsResource, courseSession), &hobbyfarmiov1.CourseSession{})
	if obj == nil {
		return nil, err
	}
	return obj.(*hobbyfarmiov1.CourseSession), err
}

// Update takes the representation of a courseSession and updates it. Returns the server's representation of the courseSession, and an error, if there is any.
func (c *FakeCourseSessions) Update(courseSession *hobbyfarmiov1.CourseSession) (result *hobbyfarmiov1.CourseSession, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(coursesessionsResource, courseSession), &hobbyfarmiov1.CourseSession{})
	if obj == nil {
		return nil, err
	}
	return obj.(*hobbyfarmiov1.CourseSession), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeCourseSessions) UpdateStatus(courseSession *hobbyfarmiov1.CourseSession) (*hobbyfarmiov1.CourseSession, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(coursesessionsResource, "status", courseSession), &hobbyfarmiov1.CourseSession{})
	if obj == nil {
		return nil, err
	}
	return obj.(*hobbyfarmiov1.CourseSession), err
}

// Delete takes name of the courseSession and deletes it. Returns an error if one occurs.
func (c *FakeCourseSessions) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(coursesessionsResource, name), &hobbyfarmiov1.CourseSession{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeCourseSessions) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(coursesessionsResource, listOptions)

	_, err := c.Fake.Invokes(action, &hobbyfarmiov1.CourseSessionList{})
	return err
}

// Patch applies the patch and returns the patched courseSession.
func (c *FakeCourseSessions) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *hobbyfarmiov1.CourseSession, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(coursesessionsResource, name, pt, data, subresources...), &hobbyfarmiov1.CourseSession{})
	if obj == nil {
		return nil, err
	}
	return obj.(*hobbyfarmiov1.CourseSession), err
}
