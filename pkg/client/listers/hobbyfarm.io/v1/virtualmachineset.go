// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/hobbyfarm/gargantua/pkg/apis/hobbyfarm.io/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VirtualMachineSetLister helps list VirtualMachineSets.
type VirtualMachineSetLister interface {
	// List lists all VirtualMachineSets in the indexer.
	List(selector labels.Selector) (ret []*v1.VirtualMachineSet, err error)
	// Get retrieves the VirtualMachineSet from the index for a given name.
	Get(name string) (*v1.VirtualMachineSet, error)
	VirtualMachineSetListerExpansion
}

// virtualMachineSetLister implements the VirtualMachineSetLister interface.
type virtualMachineSetLister struct {
	indexer cache.Indexer
}

// NewVirtualMachineSetLister returns a new VirtualMachineSetLister.
func NewVirtualMachineSetLister(indexer cache.Indexer) VirtualMachineSetLister {
	return &virtualMachineSetLister{indexer: indexer}
}

// List lists all VirtualMachineSets in the indexer.
func (s *virtualMachineSetLister) List(selector labels.Selector) (ret []*v1.VirtualMachineSet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.VirtualMachineSet))
	})
	return ret, err
}

// Get retrieves the VirtualMachineSet from the index for a given name.
func (s *virtualMachineSetLister) Get(name string) (*v1.VirtualMachineSet, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("virtualmachineset"), name)
	}
	return obj.(*v1.VirtualMachineSet), nil
}
