// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/hobbyfarm/gargantua/pkg/apis/hobbyfarm.io/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DynamicBindConfigurationLister helps list DynamicBindConfigurations.
type DynamicBindConfigurationLister interface {
	// List lists all DynamicBindConfigurations in the indexer.
	List(selector labels.Selector) (ret []*v1.DynamicBindConfiguration, err error)
	// Get retrieves the DynamicBindConfiguration from the index for a given name.
	Get(name string) (*v1.DynamicBindConfiguration, error)
	DynamicBindConfigurationListerExpansion
}

// dynamicBindConfigurationLister implements the DynamicBindConfigurationLister interface.
type dynamicBindConfigurationLister struct {
	indexer cache.Indexer
}

// NewDynamicBindConfigurationLister returns a new DynamicBindConfigurationLister.
func NewDynamicBindConfigurationLister(indexer cache.Indexer) DynamicBindConfigurationLister {
	return &dynamicBindConfigurationLister{indexer: indexer}
}

// List lists all DynamicBindConfigurations in the indexer.
func (s *dynamicBindConfigurationLister) List(selector labels.Selector) (ret []*v1.DynamicBindConfiguration, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.DynamicBindConfiguration))
	})
	return ret, err
}

// Get retrieves the DynamicBindConfiguration from the index for a given name.
func (s *dynamicBindConfigurationLister) Get(name string) (*v1.DynamicBindConfiguration, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("dynamicbindconfiguration"), name)
	}
	return obj.(*v1.DynamicBindConfiguration), nil
}
